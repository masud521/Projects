# Which cake has the most unique ingredients?
cake_ingredients %>%
filter(cake == ingredient)
# Which cake has the most unique ingredients?
cake_ingredients %>%
length(cake_ingredients)
# Which cake has the most unique ingredients?
cake_ingredients %>%
length(ingredient)
# Which cake has the most unique ingredients?
cake_ingredients %>%
filter(cake)
# Which cake has the most unique ingredients?
cake_ingredients %>%
filter(cake)
# Which cake has the most unique ingredients?
cake_ingredients %>%
filter(cake == ingredient)
# Which cake has the most unique ingredients?
cake_ingredients %>%
filter(cake == ingredient)%>%
unique(ingredient)
View(cake_ingredients)
# Which cake has the most unique ingredients?
cake_ingredients %>%
group_by(cake)
#length(unique
# Which cake has the most unique ingredients?
cake_ingredients %>%
group_by(cake) %>%
summarise(num_ingredients = n())
#length(unique
# How many ingredients are measured in teaspoons?
cake_ingredients %>%
filter(measure == "teaspoon") %>%
summarise(num_ingredients = n())
#filter(measure == max(measure)) %>%
#count(ingredient)
# How many ingredients are measured in teaspoons?
cake_ingredients %>%
filter(measure == "teaspoon")
#summarise(num_ingredients = n())
#filter(measure == max(measure)) %>%
#count(ingredient)
# How many ingredients are measured in teaspoons?
cake_ingredients %>%
filter(measure == "teaspoon")
#summarise(num_ingredients = n())
#filter(measure == max(measure)) %>%
#count(ingredient)
# How many ingredients are measured in teaspoons?
cake_ingredients %>%
filter(measure == "teaspoon")
summarise(num_ingredients = n())
# How many ingredients are measured in teaspoons?
cake_ingredients %>%
filter(measure == "teaspoon") %>%
summarise(num_ingredients = n())
#filter(measure == max(measure)) %>%
#count(ingredient)
View(cake_ingredients)
# How many ingredients are measured in teaspoons?
cake_ingredients %>%
filter(measure == "teaspoon") %>%
summarise(num_ingredients = n())%>%
count(ingredient)
View(cake_ingredients)
# How many ingredients are measured in teaspoons?
cake_ingredients %>%
filter(measure == "teaspoon") %>%
summarise(num_ingredients = n())
#filter(measure == max(measure)) %>%
#count(ingredient)
# How many ingredients are measured in teaspoons?
cake_ingredients %>%
filter(measure == "teaspoon") %>%
count(num_ingredients = n())
#filter(measure == max(measure)) %>%
#count(ingredient)
# How many ingredients are measured in teaspoons?
cake_ingredients %>%
filter(measure == "teaspoon") %>%
count(ingredients = n())
#filter(measure == max(measure)) %>%
#count(ingredient)
# How many ingredients are measured in teaspoons?
cake_ingredients %>%
filter(measure == "teaspoon") %>%
summarise(ingredients = n())
#filter(measure == max(measure)) %>%
#count(ingredient)
# How many ingredients are measured in teaspoons?
cake_ingredients %>%
filter(measure == "teaspoon") %>%
summarise(ingredient = n())
#filter(measure == max(measure)) %>%
#count(ingredient)
# How many ingredients are measured in teaspoons?
cake_ingredients %>%
filter(measure == "teaspoon")
#summarise(ingredient = n())
#filter(measure == max(measure)) %>%
#count(ingredient)
# How many ingredients are measured in teaspoons?
cake_ingredients %>%
filter(measure == "teaspoon") %>%
filter(measure == max(measure))
#summarise(ingredient = n())
#count(ingredient)
# How many ingredients are measured in teaspoons?
cake_ingredients %>%
filter(measure == "teaspoon") %>%
filter(measure == max(measure)) %>%
summarise(ingredient = n())
#count(ingredient)
# Which cake has the most unique ingredients?
cake_ingredients %>%
group_by(cake)
# summarise(num_ingredients = n())
#length(unique
# Which cake has the most unique ingredients?
cake_ingredients %>%
group_by(cake) %>%
length(unique(ingredient))
# Which cake has the most unique ingredients?
cake_ingredients %>%
group_by(cake) %>%
length(unique(cake))
# Which cake has the most unique ingredients?
cake_ingredients %>%
group_by(cake) %>%
unique(cake)
# Which cake has the most unique ingredients?
cake_ingredients %>%
group_by(cake) %>%
filter(ingredient)
# Which cake has the most unique ingredients?
cake_ingredients %>%
group_by(cake) %>%
filter(ingredient == max(ingredient))
# unique(cake)
# summarise(num_ingredients = n())
# Which cake has the most unique ingredients?
cake_ingredients %>%
group_by(cake) %>%
filter(ingredient == max(ingredient))
length(unique(cake))
# Which cake has the most unique ingredients?
cake_ingredients %>%
group_by(cake) %>%
filter(ingredient == max(ingredient)) %>%
length(unique(cake))
# Which cake has the most unique ingredients?
cake_ingredients %>%
group_by(cake) %>%
filter(ingredient == max(ingredient)) %>%
length(unique(ingredient))
# Which cake has the most unique ingredients?
cake_ingredients %>%
group_by(cake) %>%
length(unique(ingredient))
# Which cake has the most unique ingredients?
cake_ingredients %>%
group_by(cake) %>%
length(unique(ingredient))
# Which cake has the most unique ingredients?
cake_ingredients %>%
group_by(cake) %>%
group_by(ingredient)
#length(unique(ingredient))
# unique(cake)
> df_uniq <- unique(df)
# Which cake has the most unique ingredients?
cake_ingredients %>%
group_by(cake) %>%
group_by(ingredient)
#length(unique(ingredient))
# unique(cake)
#df_uniq <- unique(df)
#length(df_uniq)
# summarise(num_ingredients = n())
# (number_of_distinct_orders = length(unique(order_no))), by = name]
# Which cake has the most unique ingredients?
cake_ingredients %>%
group_by(cake) %>%
group_by(ingredient)
length(unique(ingredient))
# Which cake has the most unique ingredients?
cake_ingredients %>%
group_by(cake) %>%
group_by(ingredient)
unique(ingredient))
# Which cake has the most unique ingredients?
cake_ingredients %>%
group_by(cake) %>%
group_by(ingredient) %>%
unique(ingredient))
# Which cake has the most unique ingredients?
cake_ingredients %>%
group_by(cake) %>%
group_by(ingredient) %>%
lenght(unique(ingredient))
# Which cake has the most unique ingredients?
cake_ingredients %>%
group_by(cake) %>%
group_by(ingredient) %>%
summarise(num_ingredients = n())
# unique(cake)
#df_uniq <- unique(df)
#length(df_uniq)
# summarise(num_ingredients = n())
# (number_of_distinct_orders = length(unique(order_no))), by = name]
# Which cake has the most unique ingredients?
cake_ingredients %>%
group_by(cake) %>%
group_by(ingredient) %>%
summarise(num_ingredients = n()) %>%
select(cake)
# Which cake has the most unique ingredients?
cake_ingredients %>%
group_by(cake) %>%
group_by(ingredient) %>%
summarise(num_ingredients = n()) %>%
select(ingredient)
# unique(cake)
#df_uniq <- unique(df)
#length(df_uniq)
# summarise(num_ingredients = n())
# (number_of_distinct_orders = length(unique(order_no))), by = name]
# Which cake has the most unique ingredients?
cake_ingredients %>%
group_by(cake) %>%
group_by(ingredient) %>%
summarise(num_ingredients = n()) %>%
select(ingredient)%>%
unique(ingredient)
# Which cake has the most unique ingredients?
cake_ingredients %>%
group_by(cake) %>%
group_by(ingredient) %>%
summarise(num_ingredients = n()) %>%
select(ingredient)%>%
lenght(unique(ingredient))
# Which cake has the most unique ingredients?
cake_ingredients %>%
group_by(cake) %>%
group_by(ingredient) %>%
summarise(num_ingredients = n()) %>%
select(cake)
# Which cake has the most unique ingredients?
cake_ingredients %>%
group_by(cake) %>%
group_by(ingredient) %>%
summarise(num_ingredients = n()) %>%
select(ingredient)
# unique(cake)
#df_uniq <- unique(df)
#length(df_uniq)
# summarise(num_ingredients = n())
# (number_of_distinct_orders = length(unique(order_no))), by = name]
# Which cake has the most unique ingredients?
cake_ingredients %>%
group_by(cake) %>%
summarise(num_ingredients = n()) %>%
select(ingredient)
# Which cake has the most unique ingredients?
cake_ingredients %>%
group_by(cake) %>%
group_by(ingredient) %>%
summarise(num_ingredients = n()) %>%
select(ingredient)
# unique(cake)
#df_uniq <- unique(df)
#length(df_uniq)
# summarise(num_ingredients = n())
# (number_of_distinct_orders = length(unique(order_no))), by = name]
# Which cake has the most unique ingredients?
cake_ingredients %>%
group_by(cake) %>%
group_by(ingredient) %>%
summarise(num_ingredients = n())
# unique(cake)
# Which cake has the most unique ingredients?
cake_ingredients %>%
group_by(cake) %>%
summarise(num_ingredients = n())
# unique(cake)
# Which cake has the most unique ingredients?
cake_ingredients %>%
group_by(cake) %>%
summarise(num_ingredients = n()) %>%
filter(num_ingredients == max(num_ingredients))
# unique(cake)
# How many ingredients are measured in teaspoons?
cake_ingredients %>%
filter(measure == "teaspoon") %>%
filter(measure == max(measure)) # %>%
#summarise(ingredient = n())
# How many ingredients are measured in teaspoons?
cake_ingredients %>%
filter(measure == "teaspoon") #%>%
#summarise(ingredient = n())
# How many ingredients are measured in teaspoons?
cake_ingredients %>%
filter(measure == "teaspoon") %>%
summarise(num_measure_teaspoon = n_distinct(ingredient))
# Which cake has the most unique ingredients?
cake_ingredients %>%
group_by(cake) %>%
summarise(num_ingredients = n()) %>%
filter(num_ingredients == max(num_ingredients))
select(cake)
# Which cake has the most unique ingredients?
cake_ingredients %>%
group_by(cake) %>%
summarise(num_ingredients = n()) %>%
filter(num_ingredients == max(num_ingredients))
select(cake_ingredients)
# Which cake has the most unique ingredients?
cake_ingredients %>%
group_by(cake) %>%
summarise(num_ingredients = n()) %>%
filter(num_ingredients == max(num_ingredients))
# Which ingredients are used only once?
cake_ingredients %>%
group_by(ingredient)
# Which ingredients are used only once?
cake_ingredients %>%
group_by(ingredient) %>%
summarise(num_ingredients = n())
# Which ingredients are used only once?
cake_ingredients %>%
group_by(ingredient) %>%
summarise(num_ingredients = n())
select(ingredient)
# Which ingredients are used only once?
cake_ingredients %>%
group_by(ingredient) %>%
summarise(num_ingredients = n()) %>%
select(ingredient)
# Which ingredients are used only once?
cake_ingredients %>%
group_by(ingredient) %>%
summarise(num_ingredients = n()) %>%
filter(num_ingredients == min(num_ingredients))
# Which ingredients are used only once?
cake_ingredients %>%
group_by(ingredient) %>%
summarise(num_ingredients = n()) %>%
filter(num_ingredients == min(num_ingredients)) %>%
select(num_ingredients)
# Which ingredients are used only once?
cake_ingredients %>%
group_by(ingredient) %>%
summarise(num_ingredients = n()) %>%
filter(num_ingredients == min(num_ingredients)) %>%
select(ingredient)
# For sponge cake, how many cups of ingredients are used in total?
cake_ingredients %>%
filter(cake == "sponge") %>%
filter(measure == "cup") %>%
summarise(total_cups = sum(quantity))
#count(measure)
# For sponge cake, how many cups of ingredients are used in total?
cake_ingredients %>%
filter(cake == "sponge") %>%
filter(measure == "cup") %>%
summarise(total_cups = sum(quantity)) %>%
count(measure)
# For sponge cake, how many cups of ingredients are used in total?
cake_ingredients %>%
filter(cake == "sponge") %>%
filter(measure == "cup") %>%
summarise(total_cups = sum(quantity))
# Which ingredients are used only once?
cake_ingredients %>%
group_by(ingredient) %>%
summarise(something = n()) %>%
filter(something)
# Which ingredients are used only once?
cake_ingredients %>%
group_by(ingredient) %>%
summarise(num_ingredients = n()) %>%
filter(ingredient)
# Which ingredients are used only once?
cake_ingredients %>%
group_by(ingredient) %>%
summarise(num_ingredients = n()) #%>%
#filter(ingredient)
#summarise(num_ingredients = n()) %>%
#filter(num_ingredients == min(num_ingredients)) %>%
#select(ingredient)
#cake %>%
#group_by(ingredient) %>%
# Which ingredients are used only once?
cake_ingredients %>%
group_by(ingredient) %>%
summarise(num_ingredients = n()) %>%
filter(num_ingredients == min(num_ingredients)) #%>%
#select(ingredient)
# Which ingredients are used only once?
cake_ingredients %>%
group_by(ingredient) %>%
summarise(num_ingredients = n()) %>%
filter(num_ingredients == min(num_ingredients)) %>%
select(ingredient)
knitr::opts_chunk$set(echo = TRUE)
# load data
cake_ingredients <- read_csv(here("clean_data/cake_ingredients_clean.csv"))
```{r}
```{r}
library(tidyverse)
library(dplyr)
library(stringr)
library(janitor)
library(here)
# load data
cake_ingredients <- read_csv(here("clean_data/cake_ingredients_clean.csv"))
names(cake_ingredients)
# Which cake has the most cocoa in it?
cake_ingredients %>%
filter(ingredient == "cocoa") %>%
filter(quantity == max(quantity)) %>%
select(cake)
# For sponge cake, how many cups of ingredients are used in total?
cake_ingredients %>%
filter(cake == "sponge") %>%
filter(measure == "cup") %>%
summarise(total_cups = sum(quantity))
# How many ingredients are measured in teaspoons?
cake_ingredients %>%
filter(measure == "teaspoon") %>%
summarise(num_measure_teaspoon = n_distinct(ingredient))
# Which cake has the most unique ingredients?
cake_ingredients %>%
group_by(cake) %>%
summarise(num_ingredients = n()) %>%
filter(num_ingredients == max(num_ingredients))
# Which ingredients are used only once?
cake_ingredients %>%
group_by(ingredient) %>%
summarise(num_ingredients = n()) %>%
filter(num_ingredients == min(num_ingredients)) %>%
select(ingredient)
# load data
cake_ingredients <- read_csv(here("clean_data/cake_ingredients_clean.csv"))
cake_ingredients
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(dplyr)
library(stringr)
library(janitor)
library(here)
# load data
cake_ingredients <- read_csv(here("clean_data/cake_ingredients_clean.csv"))
cake_ingredients
names(cake_ingredients)
# 1. Which cake has the most cocoa in it?
cake_ingredients %>%
filter(ingredient == "cocoa") %>%
filter(quantity == max(quantity)) %>%
select(cake)
# 2. For sponge cake, how many cups of ingredients are used in total?
cake_ingredients %>%
filter(cake == "sponge") %>%
filter(measure == "cup") %>%
summarise(total_cups = sum(quantity))
# 3. How many ingredients are measured in teaspoons?
cake_ingredients %>%
filter(measure == "teaspoon") %>%
summarise(num_measure_teaspoon = n_distinct(ingredient))
# 4. Which cake has the most unique ingredients?
cake_ingredients %>%
group_by(cake) %>%
summarise(num_ingredients = n()) %>%
filter(num_ingredients == max(num_ingredients))
library(tidyverse)
library(dplyr)
library(stringr)
library(janitor)
library(here)
#Task 2 - Cake ingredients
# This data set is about the cakes, quantity, measurement and ingredients
# Load data from first csv file
cake_ingredient_1961 <- read_csv("raw_data/cake-ingredients-1961.csv")
# Load data from 2nd csv
cake_ingredient_code <- read_csv("raw_data/cake_ingredient_code.csv")
# Variable names first
names(cake_ingredient_1961)
# variable names 2nd
names(cake_ingredient_code
cake_ingredients <-
cake_ingredient_1961 %>%
pivot_longer(-Cake, names_to = "code", values_to = "quantity")
cake_ingredients <-
cake_ingredients %>%
drop_na()
cake_ingredients <-
cake_ingredients %>%
left_join(cake_ingredient_code, by = "code")
cake_ingredients_clean <- cake_ingredients %>%
clean_names()
# Variable names first
names(cake_ingredient_1961)
# variable names 2nd
names(cake_ingredient_code)
cake_ingredients <-
cake_ingredient_1961 %>%
pivot_longer(-Cake, names_to = "code", values_to = "quantity")
View(cake_ingredients)
cake_ingredients %>%
summarise(count = sum(is.na(quantity)))
